name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release:
    runs-on: macos-15
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Select Xcode 16
      run: sudo xcode-select -switch /Applications/Xcode_16.0.app/Contents/Developer
    
    - name: Run Tests
      run: |
        # Use a known iPhone 16 simulator ID from the available destinations
        DEVICE_ID="1565B47A-C01C-4B4C-B660-9A278E27558D"
        
        echo "Running tests before release..."
        
        if xcodebuild \
          -scheme WorkoutTracker \
          -destination "platform=iOS Simulator,id=$DEVICE_ID" \
          -configuration Release \
          clean build test \
          CODE_SIGNING_ALLOWED=NO; then
          echo "All tests passed - proceeding with release"
        else
          echo "Tests failed - aborting release"
          exit 1
        fi
    
    - name: Get Next Version
      id: version
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Remove 'v' prefix and split version
        VERSION=${LATEST_TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        
        # Determine version bump type
        VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
        
        case $VERSION_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        NEW_TAG="v$NEW_VERSION"
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
        
        echo "New version: $NEW_VERSION"
        echo "New tag: $NEW_TAG"
    
    - name: Update CHANGELOG
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        NEW_TAG="${{ steps.version.outputs.new_tag }}"
        TODAY=$(date +%Y-%m-%d)
        
        # Create new changelog entry
        echo "Updating CHANGELOG.md for version $NEW_VERSION"
        
        # Backup original
        cp CHANGELOG.md CHANGELOG.md.bak
        
        # Create new changelog content
        {
          echo "# Changelog"
          echo ""
          echo "All notable changes to CompanionFit will be documented in this file."
          echo ""
          echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),"
          echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)."
          echo ""
          echo "## [Unreleased]"
          echo ""
          echo "## [$NEW_VERSION] - $TODAY"
          echo ""
          echo "### Added"
          echo "- Release $NEW_VERSION with latest features and improvements"
          echo ""
          # Add the rest of the original changelog (skip header)
          tail -n +9 CHANGELOG.md.bak
        } > CHANGELOG.md
    
    - name: Create Release Tag
      run: |
        NEW_TAG="${{ steps.version.outputs.new_tag }}"
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Commit changelog update
        git add CHANGELOG.md
        git commit -m "Release $NEW_TAG

ðŸš€ Release version $NEW_VERSION

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
        
        # Create and push tag
        git tag -a "$NEW_TAG" -m "Release $NEW_TAG

CompanionFit version $NEW_VERSION

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
        
        git push origin main
        git push origin "$NEW_TAG"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.new_tag }}
        release_name: CompanionFit ${{ steps.version.outputs.new_tag }}
        body: |
          ## CompanionFit ${{ steps.version.outputs.new_tag }}
          
          **Release Date:** $(date +%Y-%m-%d)
          **Version Type:** ${{ steps.version.outputs.version_type }}
          
          ### ðŸŽ‰ What's New
          
          This release includes the latest features and improvements to CompanionFit.
          
          ### ðŸ“± Compatibility
          - **iOS:** 15.0+
          - **watchOS:** 8.0+ (Apple Watch support)
          - **HealthKit:** Full integration available
          
          ### ðŸ”— Links
          - [Full Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
          - [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          
          ---
          
          ðŸ¤– Generated with [Claude Code](https://claude.ai/code)
        draft: false
        prerelease: false
    
    - name: Build for App Store (Optional)
      run: |
        echo "ðŸš€ Release ${{ steps.version.outputs.new_tag }} created successfully!"
        echo "Ready for App Store submission process."
        echo ""
        echo "Next steps:"
        echo "1. Update version number in Xcode project"
        echo "2. Archive and upload to App Store Connect"
        echo "3. Submit for App Store review"