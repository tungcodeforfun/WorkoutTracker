name: Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
    types: [opened, synchronize, reopened]

jobs:
  test:
    runs-on: macos-15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode 16
      run: sudo xcode-select -switch /Applications/Xcode_16.0.app/Contents/Developer
    
    - name: List Available Simulators
      run: xcrun simctl list devices available
    
    - name: Reset Simulators
      run: |
        echo "Resetting all simulators to clean state..."
        xcrun simctl shutdown all
        xcrun simctl erase all
        
    - name: Build and Test
      timeout-minutes: 20
      run: |
        echo "Finding available simulators..."
        
        # Get first available iPhone simulator
        IPHONE_ID=$(xcrun simctl list devices available | grep "iPhone" | head -1 | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}' || echo "")
        
        if [ -n "$IPHONE_ID" ]; then
          echo "Using iPhone simulator: $IPHONE_ID"
          DEVICE_ID="$IPHONE_ID"
        else
          # Fallback to first available iPad
          IPAD_ID=$(xcrun simctl list devices available | grep "iPad" | head -1 | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}' || echo "")
          if [ -n "$IPAD_ID" ]; then
            echo "Using iPad simulator: $IPAD_ID"
            DEVICE_ID="$IPAD_ID"
          else
            echo "No available simulators found!"
            exit 1
          fi
        fi
        
        echo "Selected simulator ID: $DEVICE_ID"
        
        # Boot the simulator
        xcrun simctl boot "$DEVICE_ID" || echo "Simulator already booted or failed to boot"
        
        # Build for testing
        echo "Building for testing..."
        xcodebuild \
          -project WorkoutTracker.xcodeproj \
          -scheme WorkoutTracker \
          -destination "platform=iOS Simulator,id=$DEVICE_ID" \
          -configuration Debug \
          build-for-testing \
          CODE_SIGNING_ALLOWED=NO
        
        # Run tests with explicit test plan
        echo "Running unit tests..."
        xcodebuild \
          -project WorkoutTracker.xcodeproj \
          -scheme WorkoutTracker \
          -destination "platform=iOS Simulator,id=$DEVICE_ID" \
          -configuration Debug \
          test-without-building \
          -only-testing:WorkoutTrackerTests \
          -disable-concurrent-testing \
          CODE_SIGNING_ALLOWED=NO
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          DerivedData/Logs/Test/*.xcresult